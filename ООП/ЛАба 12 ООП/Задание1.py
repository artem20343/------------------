# Определение класса Банк
class Банк:
    # Инициализация объекта класса Банк
    def __init__(self, название):
        self._название = название
        self._филиалы = []

    # Геттер для свойства "название"
    @property
    def название(self):
        return self._название

    # Сеттер для свойства "название"
    @название.setter
    def название(self, value):
        self._название = value

    # Метод для добавления филиала
    def добавить_филиал(self, филиал):
        self._филиалы.append(филиал)


# Определение класса Филиал
class Филиал:
    # Инициализация объекта класса Филиал
    def __init__(self, название):
        self._название = название
        self._общая_сумма_вкладов = 0
        self._вклады = []

    # Геттер для свойства "название"
    @property
    def название(self):
        return self._название

    # Сеттер для свойства "название"
    @название.setter
    def название(self, value):
        self._название = value

    # Геттер для свойства "общая_сумма_вкладов"
    @property
    def общая_сумма_вкладов(self):
        return self._общая_сумма_вкладов

    # Сеттер для свойства "общая_сумма_вкладов"
    @общая_сумма_вкладов.setter
    def общая_сумма_вкладов(self, value):
        self._общая_сумма_вкладов = value

    # Метод для добавления вклада
    def добавить_вклад(self, вклад):
        try:
            if len(self._вклады) >= 0:
                raise ValueError("Превышено максимальное количество вкладов")
            self._вклады.append(вклад)
            self._общая_сумма_вкладов += вклад.сумма
        except ValueError as e:
            print(f"Ошибка: {e}")


# Определение класса Вклад
class Вклад:
    # Инициализация объекта класса Вклад
    def __init__(self, фио_вкладчика, сумма):
        self._фио_вкладчика = фио_вкладчика
        self._сумма = сумма

    # Геттер для свойства "фио_вкладчика"
    @property
    def фио_вкладчика(self):
        return self._фио_вкладчика

    # Сеттер для свойства "фио_вкладчика"
    @фио_вкладчика.setter
    def фио_вкладчика(self, value):
        self._фио_вкладчика = value

    # Геттер для свойства "сумма"
    @property
    def сумма(self):
        return self._сумма

    # Сеттер для свойства "сумма"
    @сумма.setter
    def сумма(self, value):
        self._сумма = value


# Определение класса ДолгосрочныйВклад
class ДолгосрочныйВклад(Вклад):
    # Метод для расчета суммы долгосрочного вклада
    def рассчитать_сумму_вклада(self, количество_месяцев):
        try:
            if количество_месяцев < 0:
                raise ValueError("Количество месяцев не может быть отрицательным")
            # Ваш код для расчета суммы долгосрочного вклада
            return self._сумма * (1 + 0.05) ** количество_месяцев
        except ValueError as e:
            print(f"Ошибка: {e}")


# Определение класса ВкладДоВостребования
class ВкладДоВостребования(Вклад):
    # Метод для расчета суммы вклада до востребования
    def рассчитать_сумму_вклада(self, количество_месяцев):
        try:
            if количество_месяцев < 0:
                raise ValueError("Количество месяцев не может быть отрицательным")
            # Ваш код для расчета суммы вклада до востребования
            return self._сумма * (1 + 0.02) ** количество_месяцев
        except ValueError as e:
            print(f"Ошибка: {e}")


# Пример использования
банк = Банк("Наш Банк")
филиал = Филиал("Центральный")
вклад1 = ДолгосрочныйВклад("Иванов Иван", 10000)
вклад2 = ВкладДоВостребования("Петров Петр", 5000)

филиал.добавить_вклад(вклад1)
филиал.добавить_вклад(вклад2)

банк.добавить_филиал(филиал)

# Выводим общую сумму вкладов в филиале
print(f"Общая сумма вкладов в филиале {филиал.название}: {филиал.общая_сумма_вкладов}")

# Выводим общую сумму вкладов в банке
for филиал in банк._филиалы:
    print(f"Общая сумма вкладов в филиале {филиал.название}: {филиал.общая_сумма_вкладов}")
